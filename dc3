import random
from nltk.util import ngrams
import re, unicodedata
import nltk
import inflect
import os, glob


#Normalization

def remove_punctuation(words):
    """Remove punctuation from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = re.sub(r'[^\w\s]', '', word)
        if new_word != '':
            new_words.append(new_word)
    return new_words


def replace_numbers(words):
    """Replace all interger occurrences in list of tokenized words with textual representation"""
    p = inflect.engine()
    new_words = []
    for word in words:
        if word.isdigit():
            new_word = p.number_to_words(word)
            new_words.append(new_word)
        else:
            new_words.append(word)
    return new_words


def normalize(words):
    normal = []

    for word in words:
        word = remove_punctuation(word)
        normal.append(replace_numbers(word))

    return normal


def create_ngrams(dictionary):
    ngram = []
    bigrams= ngrams(dictionary, 2)
    trigrams = ngrams(dictionary, 3)
    ngram += bigrams
    ngram += trigrams
    return ngram


def create_dict(genre_dictionary, genre):
    folder_path = '/Users/christiankeaunui/PycharmProjects/DataChallenge3/DC3/' + genre

    for filename in glob.glob(os.path.join(folder_path, '*.txt')):
        with open(filename, 'r') as f:
            text = f.read().splitlines()

            for lyric in text:
                lyric = lyric.splitlines()
                words = normalize(lyric)

                for word in ' '.join(lyric).split():
                    word = word.lower()
                    genre_dictionary[genre].append(word)

    return genre_dictionary


genre_dictionary = {'Pop': [], 'Metal': [], 'Indie': [], 'Electronic': [],
                        'R&B': [], 'Rock': [], 'Folk': [], 'Hiphop': [],
                        'Country': [], 'Jazz': []}

genres = ['Pop', 'Metal', 'Indie', 'Electronic', 'R&B',
          'Rock', 'Folk', 'Hiphop', 'Country', 'Jazz']

for genre in genres:
    dictionary = create_dict(genre_dictionary, genre)
    ngram = create_ngrams(genre_dictionary[genre])

    words = nltk.ConditionalFreqDist([(tuple(x), y) for *x, y in ngram])
    final_song = []
    final_song.append(random.choice(genre_dictionary[genre]))

    for r in range(100):
        for r in range(-2, -1, 1):
            if tuple(final_song[r:]) in words:
                final_song.append(random.choice(list(words[tuple(final_song[r:])].keys())))
                break

    print(genre)
    for word in final_song:
        print(word, end=" ")
    print("\n")
