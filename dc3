import nltk
from textblob import TextBlob
from langdetect import detect
import pandas
import googletrans
from googletrans import Translator
import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
import collections
import re, string, unicodedata
import nltk
import contractions
import inflect
from bs4 import BeautifulSoup
from nltk import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from nltk.stem import LancasterStemmer, WordNetLemmatizer
import os
from os.path import join
from nltk.corpus import PlaintextCorpusReader
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from nltk.corpus import stopwords
import pandas as pd

import os
import os, glob

genre_dictionary = {'pop': [], 'metal': [], 'indie': [], 'electronic': [],
                        'RB': [], 'rock': [], 'folk': [], 'hiphop': [],
                        'country': [], 'jazz': []}


jazz_lyrics_list =[]
def replace_contractions(text):
    """Replace contractions in string of text"""
    return contractions.fix(text)

def strip_txt(text):
    soup = BeautifulSoup(text, ".txt")
    return soup.get_text()

def remove_between_square_brackets(text):
    return re.sub('\[[^]]*\]', '', text)

def denoise_text(text):
    text = strip_txt(text)
    text = remove_between_square_brackets(text)
    return text

#Normalization
def remove_non_ascii(words):
    """Remove non-ASCII characters from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode('utf-8', 'ignore')
        new_words.append(new_word)
    return new_words

def to_lowercase(words):
    """Convert all characters to lowercase from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = word.lower()
        new_words.append(new_word)
    return new_words

def remove_punctuation(words):
    """Remove punctuation from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = re.sub(r'[^\w\s]', '', word)
        if new_word != '':
            new_words.append(new_word)
    return new_words

def replace_numbers(words):
    """Replace all interger occurrences in list of tokenized words with textual representation"""
    p = inflect.engine()
    new_words = []
    for word in words:
        if word.isdigit():
            new_word = p.number_to_words(word)
            new_words.append(new_word)
        else:
            new_words.append(word)
    return new_words

def remove_stopwords(words):
    """Remove stop words from list of tokenized words"""
    new_words = []
    for word in words:
        if word not in stopwords.words('english'):
            new_words.append(word)
    return new_words

def stem_words(words):
    """Stem words in list of tokenized words"""
    stemmer = LancasterStemmer()
    stems = []
    for word in words:
        stem = stemmer.stem(word)
        stems.append(stem)
    return stems

def lemmatize_verbs(words):
    """Lemmatize verbs in list of tokenized words"""
    lemmatizer = WordNetLemmatizer()
    lemmas = []
    for word in words:
        lemma = lemmatizer.lemmatize(word, pos='v')
        lemmas.append(lemma)
    return lemmas

def normalize(words):
    # words = remove_non_ascii(words)
    words = remove_punctuation(words)
    words = replace_numbers(words)
    words = remove_stopwords(words)
    words = stem_words(words)
    words = lemmatize_verbs(words)
    return words

#Stemming and Lemmatizing

def stem_and_lemmatize(words):
    stems = stem_words(words)
    lemmas = lemmatize_verbs(words)
    return stems, lemmas

# def translate_language(words):
# #     new_words = []
# #     for word in words:
# #         if len(word) >=3:
# #             b = TextBlob(word)
# #             if (b.detect_language()) != 'en':
# #                 googletranslate = translator.translate(word)
# #                 word = googletranslate.text
# #                 new_words.append(word)
# #             else:
# #                 new_words.append(word)
# #         else:
# #             new_words.append(word)
# #     return new_words

def translate_to_english(words):
    translator = Translator()
    return translator.translate(words).text



# stems, lemmas = stem_and_lemmatize(words)
# print('Stemmed:\n', stems)
# print('\nLemmatized:\n', lemmas)

translator = Translator()



genre = ['Pop', 'Metal', 'Indie', 'Electronic', 'R&B', 'Rock', 'Folk', 'Hiphop', 'Country', 'Jazz']

for i in genre:
    folder_path = '/Users/jasmine/Desktop/DC3/' + i
    for filename in glob.glob(os.path.join(folder_path, '*.txt')):
        with open(filename, 'r') as f:
            text = f.read().splitlines()
            for lyric in text:
                lyric = translate_to_english(lyric)
                lyric.splitlines()
                lyric = replace_contractions(lyric)
                words = normalize(nltk.word_tokenize(lyric))

                for word in words:
                    # english = translator.translate(word).text
                    # word = english
                    word = word.lower()
                    genre_dictionary[genre].append(word)

print(genre_dictionary)




