import nltk
from textblob import TextBlob
from langdetect import detect
import pandas
import googletrans
from googletrans import Translator
import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
import collections
import re, string, unicodedata
import nltk
import contractions
import inflect
from bs4 import BeautifulSoup
from nltk import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from nltk.stem import LancasterStemmer, WordNetLemmatizer
import os
from os.path import join
from nltk.corpus import PlaintextCorpusReader
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from nltk.corpus import stopwords
import pandas as pd

import os
import os, glob

genre_dictionary = {'pop': [], 'metal': [], 'indie': [], 'electronic': [],
                        'RB': [], 'rock': [], 'folk': [], 'hiphop': [],
                        'country': [], 'jazz': []}


jazz_lyrics_list =[]
def replace_contractions(text):
    """Replace contractions in string of text"""
    return contractions.fix(text)

def strip_txt(text):
    soup = BeautifulSoup(text, ".txt")
    return soup.get_text()

def remove_between_square_brackets(text):
    return re.sub('\[[^]]*\]', '', text)

def denoise_text(text):
    text = strip_txt(text)
    text = remove_between_square_brackets(text)
    return text

#Normalization
def remove_non_ascii(words):
    """Remove non-ASCII characters from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode('utf-8', 'ignore')
        new_words.append(new_word)
    return new_words

def to_lowercase(words):
    """Convert all characters to lowercase from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = word.lower()
        new_words.append(new_word)
    return new_words

def remove_punctuation(words):
    """Remove punctuation from list of tokenized words"""
    new_words = []
    for word in words:
        new_word = re.sub(r'[^\w\s]', '', word)
        if new_word != '':
            new_words.append(new_word)
    return new_words

def replace_numbers(words):
    """Replace all interger occurrences in list of tokenized words with textual representation"""
    p = inflect.engine()
    new_words = []
    for word in words:
        if word.isdigit():
            new_word = p.number_to_words(word)
            new_words.append(new_word)
        else:
            new_words.append(word)
    return new_words

def remove_stopwords(words):
    """Remove stop words from list of tokenized words"""
    new_words = []
    for word in words:
        if word not in stopwords.words('english'):
            new_words.append(word)
    return new_words

def stem_words(words):
    """Stem words in list of tokenized words"""
    stemmer = LancasterStemmer()
    stems = []
    for word in words:
        stem = stemmer.stem(word)
        stems.append(stem)
    return stems

def lemmatize_verbs(words):
    """Lemmatize verbs in list of tokenized words"""
    lemmatizer = WordNetLemmatizer()
    lemmas = []
    for word in words:
        lemma = lemmatizer.lemmatize(word, pos='v')
        lemmas.append(lemma)
    return lemmas

def normalize(words):
    # words = remove_non_ascii(words)
    words = remove_punctuation(words)
    words = replace_numbers(words)
    words = remove_stopwords(words)
    words = stem_words(words)
    words = lemmatize_verbs(words)
    return words

#Stemming and Lemmatizing

def stem_and_lemmatize(words):
    stems = stem_words(words)
    lemmas = lemmatize_verbs(words)
    return stems, lemmas

def translate_language(words):
    new_words = []
    for word in words:
        if len(word) >=3:
            b = TextBlob(word)
            if (b.detect_language()) != 'en':
                googletranslate = translator.translate(word)
                word = googletranslate.text
                new_words.append(word)
            else:
                new_words.append(word)
        else:
            new_words.append(word)
    return new_words


# stems, lemmas = stem_and_lemmatize(words)
# print('Stemmed:\n', stems)
# print('\nLemmatized:\n', lemmas)

translator = Translator()

#JAZZ
folder_path = '/Users/jasmine/Desktop/DC3/Jazz'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for jazz_lyric in text:
            jazz_lyric.splitlines()
            replace_contractions(jazz_lyric)
            words = nltk.word_tokenize(jazz_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['jazz'].append(word)
#COUNTRY
folder_path = '/Users/jasmine/Desktop/DC3/Country'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for country_lyric in text:
            country_lyric.splitlines()
            replace_contractions(country_lyric)
            words = nltk.word_tokenize(country_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['country'].append(word)
#R&B
folder_path = '/Users/jasmine/Desktop/DC3/R&B'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for rb_lyric in text:
            rb_lyric.splitlines()
            replace_contractions(rb_lyric)
            words = nltk.word_tokenize(rb_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['RB'].append(word)
#ELECTRONIC
folder_path = '/Users/jasmine/Desktop/DC3/Electronic'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for electronic_lyric in text:
            electronic_lyric.splitlines()
            replace_contractions(electronic_lyric)
            words = nltk.word_tokenize(electronic_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['electronic'].append(word)
#METAL
folder_path = '/Users/jasmine/Desktop/DC3/Metal'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for metal_lyric in text:
            metal_lyric.splitlines()
            replace_contractions(metal_lyric)
            words = nltk.word_tokenize(metal_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['metal'].append(word)
#INDIE
folder_path = '/Users/jasmine/Desktop/DC3/Indie'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for indie_lyric in text:
            indie_lyric.splitlines()
            replace_contractions(indie_lyric)
            words = nltk.word_tokenize(indie_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['indie'].append(word)
#HIPHOP
folder_path = '/Users/jasmine/Desktop/DC3/Hiphop'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for hiphop_lyric in text:
            hiphop_lyric.splitlines()
            replace_contractions(hiphop_lyric)
            words = nltk.word_tokenize(hiphop_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['hiphop'].append(word)
#FOLK
folder_path = '/Users/jasmine/Desktop/DC3/Folk'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for folk_lyric in text:
            folk_lyric.splitlines()
            replace_contractions(folk_lyric)
            words = nltk.word_tokenize(folk_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['folk'].append(word)
#ROCK
folder_path = '/Users/jasmine/Desktop/DC3/Rock'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for rock_lyric in text:
            rock_lyric.splitlines()
            replace_contractions(rock_lyric)
            words = nltk.word_tokenize(rock_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['rock'].append(word)
#POP
folder_path = '/Users/jasmine/Desktop/DC3/Pop'
for filename in glob.glob(os.path.join(folder_path, '*.txt')):
    with open(filename, 'r') as f:
        text = f.read()
        text = text.splitlines()
        for pop_lyric in text:
            pop_lyric.splitlines()
            replace_contractions(pop_lyric)
            words = nltk.word_tokenize(pop_lyric)
            words = normalize(words)
            # words = translate_language(words)

            for word in words:
                # english = translator.translate(word)
                word = word.lower()
                genre_dictionary['pop'].append(word)

for values in genre_dictionary:
    
print(genre_dictionary)
